// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	ViewDraftedArticles(ctx context.Context, in *ViewDraftedArticlesRequest, opts ...grpc.CallOption) (*ViewDraftedArticlesResponse, error)
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	ViewPublicArticles(ctx context.Context, in *ViewPublicArticlesRequest, opts ...grpc.CallOption) (*ViewPublicArticlesResponse, error)
	ViewRecentArticles(ctx context.Context, in *ViewRecentArticlesRequest, opts ...grpc.CallOption) (*ViewRecentArticlesResponse, error)
	ViewDraftOfPublicArticle(ctx context.Context, in *ViewDraftOfPublicArticleRequest, opts ...grpc.CallOption) (*ViewDraftOfPublicArticleResponse, error)
	Republish(ctx context.Context, in *RepublishRequest, opts ...grpc.CallOption) (*RepublishResponse, error)
	Drop(ctx context.Context, in *DropArticleRequest, opts ...grpc.CallOption) (*DropArticleResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewDraftedArticles(ctx context.Context, in *ViewDraftedArticlesRequest, opts ...grpc.CallOption) (*ViewDraftedArticlesResponse, error) {
	out := new(ViewDraftedArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewDraftedArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewResponse, error) {
	out := new(ViewResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewPublicArticles(ctx context.Context, in *ViewPublicArticlesRequest, opts ...grpc.CallOption) (*ViewPublicArticlesResponse, error) {
	out := new(ViewPublicArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewPublicArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewRecentArticles(ctx context.Context, in *ViewRecentArticlesRequest, opts ...grpc.CallOption) (*ViewRecentArticlesResponse, error) {
	out := new(ViewRecentArticlesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewRecentArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ViewDraftOfPublicArticle(ctx context.Context, in *ViewDraftOfPublicArticleRequest, opts ...grpc.CallOption) (*ViewDraftOfPublicArticleResponse, error) {
	out := new(ViewDraftOfPublicArticleResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/ViewDraftOfPublicArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Republish(ctx context.Context, in *RepublishRequest, opts ...grpc.CallOption) (*RepublishResponse, error) {
	out := new(RepublishResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Republish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Drop(ctx context.Context, in *DropArticleRequest, opts ...grpc.CallOption) (*DropArticleResponse, error) {
	out := new(DropArticleResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ArticleService/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations should embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	ViewDraftedArticles(context.Context, *ViewDraftedArticlesRequest) (*ViewDraftedArticlesResponse, error)
	View(context.Context, *ViewRequest) (*ViewResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	ViewPublicArticles(context.Context, *ViewPublicArticlesRequest) (*ViewPublicArticlesResponse, error)
	ViewRecentArticles(context.Context, *ViewRecentArticlesRequest) (*ViewRecentArticlesResponse, error)
	ViewDraftOfPublicArticle(context.Context, *ViewDraftOfPublicArticleRequest) (*ViewDraftOfPublicArticleResponse, error)
	Republish(context.Context, *RepublishRequest) (*RepublishResponse, error)
	Drop(context.Context, *DropArticleRequest) (*DropArticleResponse, error)
}

// UnimplementedArticleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedArticleServiceServer) ViewDraftedArticles(context.Context, *ViewDraftedArticlesRequest) (*ViewDraftedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewDraftedArticles not implemented")
}
func (UnimplementedArticleServiceServer) View(context.Context, *ViewRequest) (*ViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedArticleServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedArticleServiceServer) ViewPublicArticles(context.Context, *ViewPublicArticlesRequest) (*ViewPublicArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPublicArticles not implemented")
}
func (UnimplementedArticleServiceServer) ViewRecentArticles(context.Context, *ViewRecentArticlesRequest) (*ViewRecentArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewRecentArticles not implemented")
}
func (UnimplementedArticleServiceServer) ViewDraftOfPublicArticle(context.Context, *ViewDraftOfPublicArticleRequest) (*ViewDraftOfPublicArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewDraftOfPublicArticle not implemented")
}
func (UnimplementedArticleServiceServer) Republish(context.Context, *RepublishRequest) (*RepublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Republish not implemented")
}
func (UnimplementedArticleServiceServer) Drop(context.Context, *DropArticleRequest) (*DropArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewDraftedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewDraftedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewDraftedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewDraftedArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewDraftedArticles(ctx, req.(*ViewDraftedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).View(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewPublicArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPublicArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewPublicArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewPublicArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewPublicArticles(ctx, req.(*ViewPublicArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewRecentArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRecentArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewRecentArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewRecentArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewRecentArticles(ctx, req.(*ViewRecentArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ViewDraftOfPublicArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewDraftOfPublicArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ViewDraftOfPublicArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/ViewDraftOfPublicArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ViewDraftOfPublicArticle(ctx, req.(*ViewDraftOfPublicArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Republish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Republish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Republish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Republish(ctx, req.(*RepublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ArticleService/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Drop(ctx, req.(*DropArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _ArticleService_Write_Handler,
		},
		{
			MethodName: "ViewDraftedArticles",
			Handler:    _ArticleService_ViewDraftedArticles_Handler,
		},
		{
			MethodName: "View",
			Handler:    _ArticleService_View_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ArticleService_Publish_Handler,
		},
		{
			MethodName: "ViewPublicArticles",
			Handler:    _ArticleService_ViewPublicArticles_Handler,
		},
		{
			MethodName: "ViewRecentArticles",
			Handler:    _ArticleService_ViewRecentArticles_Handler,
		},
		{
			MethodName: "ViewDraftOfPublicArticle",
			Handler:    _ArticleService_ViewDraftOfPublicArticle_Handler,
		},
		{
			MethodName: "Republish",
			Handler:    _ArticleService_Republish_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _ArticleService_Drop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
